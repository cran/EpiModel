
%% EpiModel Tutorial Vignette %%

<<setup, include=FALSE>>=
require(knitr)
require(EpiModel)
opts_chunk$set(dev="pdf", fig.align="center", cache=TRUE, comment=NA, 
               message=FALSE, fig.width=8, out.width="0.9\\linewidth", 
               fig.height=5, fig.pos="ht!", tidy=FALSE, highlight=TRUE)
options(replace.assign=TRUE,width=70)
par(mar=c(3.5,3,1,1), mgp=c(2,1,0))
version <- packageDescription('EpiModel')$Version
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\documentclass{article}
\usepackage{mathpazo}
\usepackage{berasans}
\usepackage[T1]{fontenc}
\usepackage{amsmath}
\usepackage{geometry}
\geometry{left=1.45in, right=1.45in, 
          top=1.15in, bottom=1.15in}
\usepackage{xcolor}
\definecolor{myred}{RGB}{153, 0, 13}
\definecolor{myblue}{RGB}{8, 69, 148}
\definecolor{myblue2}{RGB}{8, 29, 88}
\usepackage[bookmarks=true,
  		      bookmarksopen=true,
		        bookmarksnumbered=true, 
            colorlinks=true, 
            linkcolor=myblue2, 
            urlcolor=myred]{hyperref}
\def\sectionautorefname{Section}
\def\subsectionautorefname{Section}
\def\subsubsectionautorefname{Section}
\usepackage{titling}
\setlength{\droptitle}{-5em}
\addtolength{\droptitle}{-5pt}
\usepackage[hang,flushmargin]{footmisc} 
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhead{}
\fancyhead[L]{EpiModel v\Sexpr{version}}
\fancyhead[R]{\thepage}
\fancyfoot{}
\usepackage{setspace}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\makeatletter
% \VignetteIndexEntry{EpiModel Tutorial}
% \VignettePackage{EpiModel} 
% \VignetteEngine{knitr}
\makeatother

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\title{\textbf{EpiModel} \\ 
    \Large{Mathematical Modeling of Infectious Disease}  \vspace{3pt} \\ 
    \large{Version \Sexpr{version}}}
\author{\textbf{Samuel M. Jenness} \vspace{-3pt} \\ 
          \normalsize{Department of Epidemiology} \vspace{-3pt}\\ 
          \normalsize{University of Washington}
    \and \textbf{Steven M. Goodreau} \vspace{-3pt} \\ 
          \normalsize{Department of Anthropology} \vspace{-3pt} \\ 
          \normalsize{University of Washington}
    \and \textbf{Li Wang} \vspace{-3pt} \\ 
          \normalsize{Department of Statistics} \vspace{-3pt} \\ 
          \normalsize{University of Washington}
    \and \textbf{Martina Morris} \vspace{-3pt} \\ 
          \normalsize{Departments of Statistics \& Sociology} \vspace{-3pt} \\ 
          \normalsize{University of Washington}\vspace{10pt}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\begin{spacing}{1.25}
\maketitle
\tableofcontents
\thispagestyle{empty}
\clearpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Introduction}
The \texttt{EpiModel} package provides tools for building, solving, and plotting 
mathematical models of infectious disease in \texttt{R}. The goals of the package 
are twofold. The first goal is to provide tools for comparative epidemic modeling 
in multiple frameworks for pedagogical purposes. The key here is \textit{comparative} 
-- the package has been designed to facilitate the understanding and exploration of 
different modeling approaches: stochastic versus deterministic, compartmental versus 
individual-based versus network-based.

The second goal is to support the development and extension these tools using the 
package's core modeling and utility functions for research. \texttt{EpiModel} is 
built on top of powerful software tools that provide access to a much wider range 
of functionality than in reviewed in this tutorial. Due to the open source platform 
of \texttt{R}, researchers can address scientific questions not currently supported 
by extending the \texttt{EpiModel} code to use these more advanced tools. 

\texttt{EpiModel} currently supports modeling for three different model classes 
(deterministic compartmental models, individual contact models, and stochastic 
network models), each with three types of disease state trajectories 
(SI, SIR, and SIS).

This vignette provides a general tutorial on the core functionality in 
\texttt{EpiModel}. There are several other sources of guidance within the package. 
Smaller, HTML-based vignettes cover specific topics for specialized or utility 
functions. Help files for nearly all functions provide concrete examples of how 
the functions are used. A good place to start is the listing of all help files 
for \texttt{EpiModel} and the primary help file for the package.
<<help, eval=FALSE>>=
help(package = "EpiModel")
?EpiModel
browseVignettes(package = "EpiModel")
@
Additionally, \texttt{EpiModel} depends heavily on the work of the \texttt{deSolve} 
package for solving deterministic models and the \texttt{Statnet} suite of R 
software for network models. Reviewing the documentation of those packages is 
strongly recommended for users who are planning to use \texttt{EpiModel} for 
research.

\paragraph{Version 0.95 Caveat} The current version of \texttt{EpiModel} is v0.95, 
which indicates that some fundamental design elements to the user interface have 
not been settled. Therefore, we must note that \textbf{any code developed using 
this version of \texttt{EpiModel} is not guaranteed to work with the v1.0 and 
following versions.} With the v1.0 and following, the major user-interface elements 
(e.g., function argument structures) will be designed to be stable over time; 
some minor elements may change, but with the goal of backwards compatibility.



\section{Deterministic Compartmental Models}\label{sec:dcm}
Deterministic compartmental models solve differential equations representing an 
analytic epidemic system in continuous time. The models are \textit{deterministic} 
because their solutions are fixed mathematical functions of the input parameters 
and initial conditions, with no stochastic variability in the disease and demographic 
transition processes. The models are \textit{compartmental} because they divide 
the population into groups representing discrete disease states (susceptible versus 
infected), and further on demographic, biological, and behavioral traits that 
influence disease transmission. In contrast to the stochastic models presented 
below, individuals within the population are not discretely represented.

\subsection{A Basic SI Model}\label{sec:dcmSI}
Starting with the basic Susceptible-Infected (SI) disease model in which there is 
random mixing within the population, the size of each compartment over time is 
represented by the equations:
\begin{align}
  \frac{dS}{dt} &= -\lambda S \notag \\[4pt]
  \frac{dI}{dt} &= \lambda S
\end{align}
where $\lambda$ is the force of infection and represents $\frac{\beta c I}{N}$. 
$\beta$ is the probability of transmission per contact, $c$ is the rate of contact 
per person per unit time, $I$ is the number infected at time $t$ and and $N$ is 
the population size at time $t$ (we drop the $t$ subscript from the differential
equations as it is implicit throughout). Therefore, the force of infection is the
hazard of per person per unit time of becoming infected.

Because ``contact'' may be ambiguously defined in the modeling literature, we use 
the word act to represent the activity (e.g., face-to-face talking or sexual 
intercourse) by which disease may be transmitted. The force of infection is 
multiplied by the current state sizes of the $S$ to solve the differential 
equation yielding the rate of change for the compartment. 

To construct a deterministic model in \texttt{EpiModel}, we use the \texttt{epiDCM} 
function. This currently provides functionality for several model types with 
homogeneous and heterogeneous mixing in the population. Many of the arguments for 
\texttt{epiDCM} are set by default, so we start at the most basic with a population 
of 501, with just one person infected at $t_0$. The \texttt{trans.rate} argument 
sets the transmission probability per act, and \texttt{act.rate} sets the acts 
per person per unit time. 
<<dcmSi>>=
mod <- epiDCM(type = "SI", s.num = 500, i.num = 1, 
              trans.rate = 0.2, act.rate = 0.25, nsteps = 500)
@
We have stored all the model output in our object \texttt{mod}. The options for 
analyzing the results are aligned across all the model classes and types, with 
minimal variation. Printing the model object (simply typing the object into the 
R console) provides basic information on the model, including model parameters 
and output available for plotting and statistical analysis. 
<<dcmSiPrint>>=
mod
@
The output shows that two compartments and one flow are available. In 
\texttt{EpiModel}, regardless of the model class, compartments are those discrete 
disease states and flows are the transitions between states and, when demographic 
processes are introduced, transitions in and out of the population. The 
\texttt{i.num} compartment is the size of the $I$ compartment at each of the 
solved time steps. The endogenous disease flow names represent the starting and 
ending state. For example, the \texttt{si.flow} is the number of people moving 
from $S$ to $I$ at each time step. In epidemiological terms, \texttt{i.num} and 
\texttt{si.flow} are disease prevalence and incidence. One may extract these 
values directly by using the dollar operator, although later we introduce the 
\texttt{as.data.frame} method for easier extraction.
<<dcmSiHead>>=
head(mod$i.num)
head(mod$si.flow)
@

Next, to plot the results of the model we use the generic \texttt{plot} function, 
which by default plots all the model compartment state prevalences (state size / 
population size) over time. There are many plotting options that we will explore 
in detail later.
<<dcmSiPlot>>=
plot(mod)
@

After examining the plot, we would like to know the size of each compartment at 
a specific time. That is available with the generic \texttt{summary} function, 
with the user inputting the time of interest. At $t_{150}$, 22.5\% of the 
population have become infected, and the incidence at that time is 4.37 new 
infections. 
<<dcmSiSumm>>=
summary(mod, time = 150)
@


\subsection{SIR Model with Demography}\label{sec:dcmSIR}
In a Susceptible-Infectious-Recovered (SIR) model, infected individuals recover 
from disease into a life-long recovered state; they are never again susceptible 
to disease. In this section, we model an SIR disease by adding to our basic SI 
model a recovery process. We also introduce  demographic processes so that persons 
may enter and exit the population through births and deaths. The model is 
represented by the following system of differential equations:
\begin{align}
  \frac{dS}{dt} &= -\lambda S + fN - \mu_s S \notag \\[4pt]
  \frac{dI}{dt} &= \lambda S - \nu I - \mu_i I \notag \\[4pt]
  \frac{dR}{dt} &= \nu I - \mu_r R
\end{align}
where $f$ is the birth rate, $\mu$ are the mortality rates specific for each 
compartment, and $\nu$ is the recovery rate. In an SIR model, the recovery rate 
is the reciprocal of the average duration of disease infectiousness, and likewise 
the reciprocal of the death rates are the average life expectancy for persons in 
those compartments. 

\paragraph{Solving} In \texttt{EpiModel}, introducing these new transition 
processes into the model is straightforward. Most importantly, it is necessary 
to set \texttt{type="SIR"}. Next one sets the recovery rate, birth rate, and 
state-specific death rates as below. The model is solved through 500 time steps, 
but here we also specify \texttt{dt=0.5} to obtain model results in fractional 
time units (e.g., results are available for $t_1$, $t_{1.5}$, $t_2$, $\dots$, 
$t_{499.5}$, $t_{500}$).
<<dcmSir>>=
mod <- epiDCM(type = "SIR", s.num = 1000, i.num = 1, r.num = 0, 
              trans.rate = 0.2, act.rate = 1, rec.rate = 1/20,
              b.rate = 1/95, ds.rate = 1/100, di.rate = 1/80, 
              dr.rate = 1/100, nsteps = 500, dt = 0.5)
@
In words, our model parameters imply that the birth rate is slightly higher than 
the underlying death rates, and that there is disease-induced mortality because 
the \texttt{di.rate} is larger than the other two death rates. 

\paragraph{Plotting} Next we plot the results of the model with several plot 
arguments set to non-default values. The \texttt{par} options set general plotting 
options, and here two side-by-side plots are set. In the left plot, the 
\texttt{popfrac=FALSE} argument plots the compartment size (rather than prevalence) 
and \texttt{alpha} increases the transparency of the lines for better visualization. 

By default, the \texttt{plot} function will plot the prevalences for all 
compartments in the model, but in the right plot we override that using the 
\texttt{y} argument to specify that disease incidence (the \texttt{si.flow} 
element of the model object) should be plotted. Also by default in any plots 
with a ``flow'' output, the absolute number will be plotted (i.e., 
\texttt{popfrac=FALSE} by default).
<<dcmSirPlot, fig.height=4>>=
par(mar = c(3.2,3,2,1), mgp = c(2,1,0), mfrow = c(1,2))
plot(mod, popfrac = FALSE, alpha = 0.5, 
     lwd = 4, main = "Compartment Sizes")
plot(mod, y = "si.flow", lwd = 4, col = "firebrick", 
     main = "Disease Incidence", leg = "n")
@
Finally, it is also possible to specify a single line color, a vector of colors, 
or a color palette (more on that next) using the \texttt{col} argument, and the 
legend options are set using the \texttt{leg} argument.

\paragraph{Summaries} In~\autoref{sec:dcmSI}, we obtained time-specific model 
values using the \texttt{summary} function. It is also possible to obtain that 
information graphically with the \texttt{comp.plot} function. This plot provides 
a standard state-flow diagram that is typically presented in the epidemiological 
literature.
<<dcmSirCPlot>>=
par(mfrow = c(1,1))
comp.plot(mod, time = 50, digits = 1)
@
The plot shows the three state sizes and flows at $t_{50}$. This plot is also 
built into the \texttt{summary} function through the \texttt{comp.plot} argument 
to that function (see the help pages for the class-specific summary functions). 
Currently these plots are limited to one-group models only, but this functionality 
will be expanded in future releases.


\subsection{SIS Model with Sensitivity Analyses}
It is often of scientific interest to know how model outputs (e.g., disease 
prevalence and incidence) vary with starting parameter values. A key design 
feature of \texttt{epiDCM} class models is to run these type of sensitivity 
analyses with minimal programming to facilitate the exploration of model 
counterfactuals.

In this Section, we illustrate an example for a Susceptible-Infected-Susceptible 
(SIS) disease, an example of which is a curable bacterial sexually transmitted 
infection like gonorrhea. For ease of presentation, we model this in a closed 
population (no demography), but those processes may be added to this base model 
in the same way as the SIR model in~\autoref{sec:dcmSIR}. 

The SIS model is represented by the following system of differential equations:
\begin{align}
  \frac{dS}{dt} &= -\lambda S + \nu I \notag \\[4pt]
  \frac{dI}{dt} &= \lambda S - \nu I 
\end{align}
where the $\nu$ parameter now represents ``recovery'' back into the susceptible 
state (no one achieves life-long immunity from disease). The force of infection 
and recovery equations are mirrors of one another, since individuals flow back and 
forth between states over time.

In \texttt{EpiModel}, running an SIS model requires specifying \texttt{type="SIS"} 
and supplying a \texttt{rec.rate} parameter, just as with an SIR model. To conduct 
a sensitivity analysis, we  enter the parameter to be varied as a vector of values 
rather than a scalar (a single value). Here, we vary the \texttt{act.rate} parameter 
from 0.25 to 0.50 acts acts per person per unit time in increments of 0.05 acts. 
Therefore, this sensitivity analysis will run 6 models to investigate epidemic 
trajectories given a changing \texttt{act.rate} but holding all other parameters 
constant.
<<dcmSis>>=
mod <- epiDCM(type = "SIS", s.num = 500, i.num = 1,
              trans.rate = 0.2, act.rate = seq(0.25, 0.5, 0.05),
              rec.rate = 1/50, nsteps = 350)
@

When we print the model output, it is clear that a sensitivity model has been 
run because the output indicates 6 runs, with the appropriate range of values 
for the \texttt{act.rate} parameter.
<<dcmSisPrint>>=
mod
@

\paragraph{Extracting Output} In~\autoref{sec:dcmSI}, we demonstrated how to 
extract model output using the dollar sign syntax. In a sensitivity analysis mode, 
the output of each compartment or flow (e.g., \texttt{mod\$s.num}) is not a vector 
of values but a data frame with columns for each model run and rows for each time 
step. To extract all the compartment or flow values across runs, we still use the 
dollar sign syntax. But to extract all the model output \textit{for all compartments 
and flows from a specific run}, we can use the generic \texttt{as.data.frame} function. 

Below we extract primary model output from the fifth model run for the first five 
time steps. The run-specific data frame may also be saved out to its own object 
for further analysis.
<<dcmSisHead>>=
head(as.data.frame(mod, run = 5))
@

\paragraph{Plotting} For plotting a sensitivity analysis, \texttt{EpiModel} 
features specialized  tools to highlight the range of values across model runs. 
Below is a two-panel plot of disease prevalence and incidence across all 6 models. 
By default, plotting a sensitivity model will show the disease prevalence over 
time: the proportion of persons infected in each model run at each time step. 
<<dcmSisPlot, fig.height=4>>=
par(mfrow = c(1,2), mar = c(3.2,3,2.5,1))
plot(mod, alpha = 1, main = "Disease Prevalence")
plot(mod, y = "si.flow", col = "Greens", alpha = 0.8,
     main = "Disease Incidence")
@
\texttt{EpiModel} uses a robust color palette system to set the range of colors 
across the models in order to easily differentiate lines. The underlying framework 
is the \texttt{RColorBrewer} package, which provides access to visually distinct 
color palettes used in geographic mapping. The default color palette is featured 
for the prevalence plot, but any palette in \texttt{display.brewer.all()} may be 
set using the \texttt{col} argument, as with the incidence plot. 

The color argument also accepts vectors of colors as well. For example, the 
following are also acceptable color specifications for a sensitivity analysis plot. 
It is also possible to set run-specific line types in a similar fashion using the 
\texttt{lty} argument. 
<<dcmSisPlotOpts, eval=FALSE>>=
plot(mod, col = "black") 
plot(mod, col = 1:6)     
plot(mod, col = c("black", "red", "blue", "green", "purple", "pink"))
plot(mod, col = rainbow(6))
@

\paragraph{Varying Multiple Parameters} It is also possible to vary multiple 
parameters simultaneously. The only limitation is that the number of model runs 
implied must be equal across all varying parameters. For example, if one specifies 
\texttt{act.rate} as a vector of length six, and one is also interested in 
simultaneously varying the transmission probability, the length of that 
\texttt{trans.rate} vector must also be six. Below is an example showing those 
two parameters simultaneously varied, although the results are not shown.

In total, six models are requested in this sensitivity analysis. There are three 
different act rates, and for each act rate, there are two different transmission 
probabilities to model. The varying act and transmission parameters will then be 
evaluated in that order, with the first model having \texttt{act.rate=0.2} and 
\texttt{trans.rate=0.1}, and the last model having \texttt{act.rate=0.6} and 
\texttt{trans.rate=0.2}.
<<dcmSisSensOpts, eval=FALSE>>=
act.rates <- c(0.2, 0.2, 0.4, 0.4, 0.6, 0.6)
trans.rates <- c(0.1, 0.2, 0.1, 0.2, 0.1, 0.2)
mod <- epiDCM(type = "SIS", s.num = 500, i.num = 1,
              trans.rate = trans.rates, act.rate = act.rates,
              rec.rate=1/50, nsteps = 350)
@

\subsection{Two-Group SI Model with Vital Dynamics}\label{sec:dcmSi2g}
\texttt{EpiModel} also includes heterogeneous two-group models, which break the 
random mixing patterns implied by one-group models. These two-group models are 
available for all three model classes, but for network models we call them 
two-\textit{mode} (or bipartite models) in accordance with  network science 
terminology (see~\autoref{sec:netDepModel}). 

In the two-group models as they are currently structured, mixing between groups 
is \textit{purely heterogeneous}: one group only has contacts with the other 
group; there are no within-group contacts. This framework would be appropriate 
for epidemic modeling on a purely heterosexual partnership structure, with the 
simplifying assumption of no same-sex contacts. More flexible assortative mixing, 
in which mixing occurs imperfectly across groups, is currently possible for 
network models (see~\autoref{sec:netIndModel}) but not yet for deterministic and 
individual contact models (that functionality will be added in future versions).

\paragraph{Mathematical Structure} We build upon the basic SI model featured 
in~\autoref{sec:dcmSI}. The model now includes four compartments, two disease 
states $\times$ two groups, requiring the following set of four differential 
equations. The equation variables are subscripted by group number; in 
\texttt{epiDCM} one must specify group-specific parameters for the force of 
infection, birth rate, and death rates.
\begin{align}
  \frac{dS_{g1}}{dt} &= -\lambda_{g1}S_{g1} + f_{g1}N_{g1} - \mu_{s,g1}S_{g1}   \notag \\[4pt]
  \frac{dI_{g1}}{dt} &= \lambda_{g1}S_{g1} - \mu_{i,g1}I_{g1}                   \notag \\[4pt]
  \frac{dS_{g2}}{dt} &= -\lambda_{g2}S_{g2} + f_{g2}N_{g2} - \mu_{s,g2}S_{g2}   \notag \\[4pt]
  \frac{dI_{g2}}{dt} &= \lambda_{g2}S_{g2} - \mu_{i,g2}I_{g2}                  
\end{align}
The critical heterogeneous mixing component is actually embedded within the 
group-specific $\lambda$ transmission rates. The formula for the two lambdas that 
specifies mixing is:
\begin{align}
  \lambda_{g1} &= \tau_{g1} \times \alpha_{g1} \times \frac{I_{g2}}{N_{g2}}      \notag \\[4pt]
  \lambda_{g2} &= \tau_{g2} \times \alpha_{g2} \times \frac{I_{g1}}{N_{g1}}
\end{align}
In words, the force of infection for group one is the product of the group one 
transmission probability per act, the group one act rate per unit time, and the 
probability that an infected is selected among the possible group 2 contacts. 
The difference with the one-group model is that group-specific $\tau$ and $\alpha$ 
parameters are allowed. 

The probability of coming into contact with an infected person is not based on 
the prevalence of \textit{all} infected persons, but only those of the opposite 
group. The group-specific $\tau$ parameter is the \textit{probability of a 
transmission occurring to that group member} (e.g., $\tau_{g1}$ is the probability 
that a member of group one is infected given contact with a member of group two).

\paragraph{Balancing Act} Another important point concerns the act rate parameter, 
$\alpha$. In the formulas for the group-specific $\lambda$ above, it was implied 
that each group may have its own act rate. However, in practice with these purely 
heterogeneous mixing models, the act rate of one group has a specific mathematical 
relationship with the act rate of the other group:
\begin{align}
  \alpha_{g1}N_{g1} &= \alpha_{g2}N_{g2}
\end{align}
The number of acts per unit time for each group is the act rate times the group 
size. The total number of acts in one group in this purely heterogeneous mixing 
model must equal the total number of acts in the other. To accomplish we use act 
rate ``balancing''. This is particularly important in an open population model 
since the group population sizes change over time. 

There are a variety of ways to accomplish this balancing, but we implement a basic 
method currently in \texttt{EpiModel}. One specifies an $\alpha$ parameter for 
\textit{either} group one or group two, and also that this is the group the other 
group's $\alpha$ should be balanced on. For example, if one specifies $\alpha_{g1}$, 
then the act rate for group one is fixed at that value and the rate for group two 
is derived over time by rearranging the equation above as follows:
\begin{align}
  \alpha_{g2} &= \frac{\alpha_{g1}N_{g1}}{N_{g2}}
\end{align}
It is mathematically possible to implement more flexible balancing that averages 
two act rates or deals with changes in other ways, but the balancing is currently 
limited in \texttt{EpiModel} to the above formulation.

\paragraph{Parameterizing Groups} With the \texttt{epiDCM} function, it is simple 
to add another group to the model. The first step is to specify that 
\texttt{groups=2}, and then set the group-specific initial state sizes and model 
parameters. The names of the parameters for the first group has not changed: the 
sizes and parameters specific to group one are those \textit{without} the 
\texttt{g2} suffix. 

An important use of two-group models is to allow for some biological or behavioral 
distinctions between groups that differentially impacts disease transmission. In 
the model below, we specify that the transmission probability for group one is 
four times as high as that of group two. This could represent a four-fold higher 
risk of infection for females (group 1) than for males (group 2). 

We enforce the act rate balancing as noted above, by specifying an act rate for 
group one only and also using the \texttt{balance = "g1"} argument. Needing to 
specify which group's act rate trumps in this argument is redundant, since it is 
implied by the group that has an act rate, but future versions of \texttt{EpiModel} 
will use this argument to allow the user to specify how balancing should occur. 
<<dcmSi2g, results="hide">>=
mod <- epiDCM(type = "SI", groups = 2, 
              s.num = 500, i.num = 1, 
              s.num.g2 = 500, i.num.g2 = 0, 
              trans.rate = 0.4,  trans.rate.g2 = 0.1, 
              act.rate = 0.25, balance = "g1",
              b.rate = 1/100, b.rate.g2 = NA,
              ds.rate = 1/100, ds.rate.g2 = 1/100,
              di.rate = 1/50, di.rate.g2 = 1/50,
              nsteps = 500)
@
Note also how the group-specific birth rates are input. Because these purely 
heterogeneous mixing models are ideal for heterosexual disease transmission in 
which groups are sexes, we can represent group one as females and group two as 
males. In this case, the birth rate into a population is not a function of the 
total population size but that of the female group. Therefore, one may specify 
a birth rate for females only, and set the group two birth rate to \texttt{NA}. 
If so this is done, new births are evenly allocated between the two groups based 
on the size of group one and the rate specified by \texttt{b.rate}.

Solving the model, we print to show its contents. The number of compartments and 
flows available to plot and analyze has now doubled. Here again, the group one 
outcomes are those without the \texttt{g2} suffix. 
<<dcmSi2gPrint>>=
mod
@

The default plot shows the prevalence of all four compartments in the model. Note 
that two-group models with sensitivity analyses begin to visually overwhelm the 
plotting of compartments. One should freely deviate from the default plotting 
options to specify which specific compartments or flows and from which model runs 
should be represented.
<<dcmSi2gPlot>>=
plot(mod)
@


\subsection{Graphical Interface for epiDCM}
To help introduce DCM models primarily for teaching purposes, we have included 
in \texttt{EpiModel} a web browser-based graphical user interface (GUI). The GUI 
is based on the \texttt{shiny} package that enables the creation of interactive 
data analysis tools from within \texttt{R}. To run the GUI, simply type the 
following into the console. This will open a browser window. Parameter values 
and initial state sizes may be changed. Output includes plots, data summaries, 
and raw data to extract.
<<dcmGui, eval=FALSE>>=
gui.epiDCM()
@
The GUI is currently limited to one-group homogeneous mixing models only but may 
be expanded to include more complex mixing structures in a forthcoming release.


\section{Individual Contact Models}\label{sec:icm}
In this Section, we outline the framework for the class of models called 
individual contact models. These models are intended to be stochastic analogs of 
the deterministic compartmental models featured in~\autoref{sec:dcm} and solved 
with the \texttt{epiDCM} function. The main differences between the two model 
classes are as follows. 
\vspace{-3pt}
\begin{enumerate}\itemsep1pt
\item \textbf{Rates are stochastic:} these are stochastic models in which nearly 
all of the rates governing transitions between states are now random draws from 
distributions summarized by those rates. This will be explained in detail in the 
examples below. 
\item \textbf{Time is discrete:} The \texttt{epiICM} class models are in discrete 
time, in contrast to the continuous time of the \texttt{epiDCM}. In the former, 
everything within a time step happens in a series of processes, since there is 
no instantaneous occurrence of events independent of others, as is possible in 
deterministic models. This has the potential to introduce bias or artificiality 
into the disease process if the unit for the time step is large (e.g., a month) 
since the transitions that might occur within that time step cannot necessarily 
be considered independent. In general, \textit{caution is needed} when simulating 
any discrete-time model with long unit time steps or large rate parameters, given 
the potential for competing risks within each step.
\item \textbf{Units are individuals:} \texttt{epiICM} models simulate disease 
spread over a simulated population of individually identifiable elements; in 
contrast, \texttt{epiDCM} treats the population as an aggregate whole which is 
infinitely divisible, with individual elements in this population neither 
identifiable nor accessible for modeling purposes. The implications of this are 
relatively minor if the stochastic simulations occur on a sufficiently large 
population, but there are some critical modeling considerations of individual-based 
simulations that will be reviewed in the examples below.
\end{enumerate}

A major goal of \texttt{EpiModel} is to facilitate comparisons across different 
model classes, so the interface and functionality of the stochastic models in 
\texttt{epiICM} is very similar to \texttt{epiDCM}. The syntax and argument names 
for all of the shared parameters and initial state sizes are the same. One 
difference between the two functions is the way \textit{sensitivity analyses} are 
handled: \texttt{epiICM} will not run multiple models across varying parameters 
because each model with a given parameter set is typically run many times to 
quantify the stochasticity in the model. Therefore sensitivity analyses would 
need to be run from separate \texttt{epiICM} function calls.

\subsection{SI Model Stochasticity}
We introduce \texttt{epiICM} by using the same model parameterization as the 
deterministic SI model in~\autoref{sec:dcmSI}, with one person infected, an 
average activity or contact rate of 0.25 per time step, and a transmission 
probability of 0.2 per act. We simulate this model 10 times over 300 time steps.
<<icmSi, results="hide">>=
mod <- epiICM(type = "SI", s.num = 500, i.num = 1, 
              trans.rate = 0.2, act.rate = 0.25, 
              nsims = 10, nsteps = 300)
@
By default, the function prints the model progress (although that is suppressed 
here): stochastic simulation models generally take longer to run than the 
deterministic models, especially for larger populations and longer time ranges, 
because transition processes must be simulated for each individual at each time 
step.

The model results may be printed, summarized, and plotted in very similar a 
fashion to the \texttt{epiDCM} models. Printing the ICM model object shows the 
number of simulations for which there are results. 
<<icmSiprint>>=
mod
@

In contrast to \texttt{epiDCM}, the summary function now \textit{does not} take 
a \texttt{run} argument (used only for sensitivity analyses anyway). Instead, 
the output summarizes the mean and standard deviation of model results at the 
requested time step across all simulations. Here, we request those summaries at 
time step 125; the output shows the compartment and flow averages across those 
10 simulations.
<<icmSiSumm>>=
summary(mod, time = 125)
@

Summary statistic values like means and standard deviations may be of primary 
interest for analysis and plotting, so the generic \texttt{as.data.frame} 
function for \texttt{epiICM} objects allows for this. As described in the 
function help page (see \texttt{?as.data.frame.epiICM}), the output choices are 
for the time-specific means, standard deviations, and individual simulation values.
<<icmSIAsDf>>=
head(as.data.frame(mod, out='mean'))
@

\paragraph{Plotting} Plotting stochastic model results requires thinking through 
what summary measures best represent the model. In some models, it may be 
sufficient to plot the simulation means, but in others visualizing the individual 
simulations is necessary.

The generic plotting function for \texttt{epiICM} objects generates these visual 
outputs simply but robustly. Standard plotting output includes individual 
simulation lines, means of those simulations, and simulation quantiles. Plotting 
the model object with no options will show the mean and inter-quartile range for 
all compartment sizes in the model for one-group models, and the mean lines for 
two-group models. 

Each of the elements may be toggled on or off using the plotting arguments 
listed in \texttt{?plot.epiICM}. Here, we add the individual simulation lines to 
the default plot using \texttt{sim.lines} and then color those lines with 
\texttt{sim.col}. 
<<icmSiPlot>>=
plot(mod, sim.lines = TRUE, sim.col = c("steelblue", "firebrick"))
@
Note that we use the \texttt{RColorBrewer} color palette system to generate the 
default colors but these plots, but the colors are closely approximated by the 
built-in R standard colors \textit{steelblue} for blue, \textit{firebrick} for 
red, and \textit{seagreen} for green.


\subsection{SIR Stochastic-Deterministic Comparison}
One methodological question for comparative mathematical modeling is how model 
results vary with model structure while fixing parameters. \texttt{EpiModel} 
allows for easy comparison between model classes using the same parameters. In 
this Section, we show how to compare a deterministic with a stochastic SIR model 
in an open population (i.e., with demography). First, the deterministic model is 
run with the following parameters. 
<<icmSirDet>>=
det <- epiDCM(type = "SIR", s.num = 1000, i.num = 100,
              trans.rate = 0.2, act.rate = 0.8, rec.rate = 1/50,
              b.rate = 1/100, ds.rate = 1/100, di.rate = 1/90,
              dr.rate = 1/100, nsteps = 300)
@
Note that we have a large number of infected at $t_0$ because with just one 
infected it usually takes discrete-time, individual-based models much longer to 
grow the epidemic. This itself is an interesting property of individual-based, 
discrete-time stochastic models that may better represent reality; but here, our 
goal is very close approximation by minimizing these differences.

The \texttt{epiICM} model is simulated 10 times, with the same parameters as the 
deterministic model. In this model, the contact, transmission with contact, 
recovery, birth, and death processes are all governed by random draws from Poisson 
or binomial distributions with parameters set by the rates specified here.
<<icmSirSto, results="hide">>=
sim <- epiICM(type = "SIR", s.num = 1000, i.num = 100,
              trans.rate = 0.2, act.rate = 0.8, rec.rate = 1/50,
              b.rate = 1/100, ds.rate = 1/100, di.rate = 1/90,
              dr.rate = 1/100, nsteps = 300, nsims = 10)
@

As a third model, we change our ICM model to toggle off the stochastic elements 
of the birth death processes. Instead of setting the number of new births and 
deaths in each compartment at each time step as random draws from a Poisson 
distribution with rate parameters set by the arguments, these transition flows 
are calculated by rounding the product of the rate and the state size. 
<<icmSirSto2, results="hide">>=
sim2 <- epiICM(type = "SIR", s.num = 1000, i.num = 100,
               trans.rate = 0.2, act.rate = 0.8, rec.rate = 1/50,
               b.rate = 1/100, ds.rate = 1/100, di.rate = 1/90,
               dr.rate = 1/100, nsteps = 300, nsims = 10,
               b.rand = FALSE, d.rand = FALSE)
@

\paragraph{Comparing Means} In our plot, the deterministic results are shown in 
the solid line, the first stochastic results in the dashed line, and second 
stochastic results in the dotted line. In this example, the three lines are 
generally consistent, which is as expected since we are only visualizing the 
means, we have a sufficiently large population, and the demographic transition 
rates are relatively low. 
<<icmSirPlot>>=
plot(det, alpha = 0.75, lwd = 4, main = "DCM and ICM Comparison")
plot(sim, qnts = FALSE, add = TRUE, mean.lty = c(2,2,2), leg = FALSE)
plot(sim2, qnts = FALSE, add = TRUE, mean.lty = c(3,3,3), leg = FALSE)
@

\paragraph{Comparing Variance} Note, however, that the variation in flows across 
simulations is vastly different as a component of the stochastic process of 
mortality in the full stochastic model. In the following side-by-side plots, we 
show the individual simulation lines for the out-transition (mortality) from the 
infected state. In the full stochastic model, there is a relatively wide range of 
numbers of infected deaths over time, whereas there is little variability in the 
limited stochastic model.
<<icmSirPlot2, fig.height=4>>=
par(mfrow = c(1,2), mar = c(3,3,2,1), mgp = c(2,1,0))
plot(sim, y = "di.flow", mean.line = FALSE, 
     sim.lines = TRUE, sim.alpha = 0.5, 
     ylim = c(0, max(sim$di.flow)), 
     main = "di.flow: Full Stochastic Model")
plot(sim2, y = "di.flow", mean.line = FALSE, 
     sim.lines = TRUE, sim.alpha = 0.5, 
     ylim = c(0, max(sim$di.flow)), 
     main = "di.flow: Limited Stochastic Model")
@

For a time-specific analysis of variance, we can compare the standard deviations 
of the two model results at time step 50 (about when the infected death incidence 
peaks) using the data extraction through \texttt{as.data.frame} generic function:
<<icmSirAdf>>=
icm.compare <- rbind(round(as.data.frame(sim, out = "sd")[50,], 2),
                     round(as.data.frame(sim2, out = "sd")[50,], 2))
row.names(icm.compare) <- c("full", "lim")
icm.compare
@
The minor variations in the birth and death flows at some time points because 
the compartment size at each time point is still a function of the random 
infection transition across time. 


\subsection{Two-Group SIS Model with Demography}
The last model type we feature for \texttt{epiICM} class models is a two-group 
Susceptible-Infected-Susceptible (SIS) model in which there are two groups that 
mix purely heterogeneously. The model is parameterized in much the same way as 
the deterministic two-group SIR model featured in~\autoref{sec:dcmSi2g}. There 
are the same act rate balancing considerations. One must also specify group-specific 
recovery rates. In this model, we simulate a disease in which the first group has 
twice the probability of infection, but recovers back into the susceptible state 
at twice the rate as the second group. This might occur, for example, if first 
group differentially had access to curative treatment for disease. 
<<icmSisSim, results="hide">>=
set.seed(12345)
sim <- epiICM(type = "SIS", groups = 2,
              s.num = 500, i.num = 1,
              s.num.g2 = 500, i.num.g2 = 1,
              trans.rate = 0.2, trans.rate.g2 = 0.1,
              act.rate = 0.5, balance = "g1",
              rec.rate = 1/25, rec.rate.g2 = 1/50,
              b.rate = 1/100, b.rate.g2 = NA,
              ds.rate = 1/100, ds.rate.g2 = 1/100,
              di.rate = 1/90, di.rate.g2 = 1/90,
              nsteps = 500, nsims = 10)
@

The plot shows a similar disease burden for both groups, with a disease prevalence 
of around 16\% in both groups at time step 400. But we see similar epidemic 
trajectories for both groups because their transmission probabilities and recovery 
rates have balanced out: both groups have an $R_0 = 2.5$.
<<icmSISPlot1>>=
par(mfrow = c(1,1))
plot(sim)
@
The default plotting options for two-group models will only show the simulation 
means, so the additional summary information (quantiles and individual simulation 
lines) must be toggled on as needed (see \texttt{?plot.epiICM} for help).

This second plot shows that we must be careful to only look at the simulation means. 
In this case, the mean lines are an average of normally occurring epidemics in 
\Sexpr{sum(sim$i.num[400, ] > 0)} simulations and extinct epidemics in 
\Sexpr{sum(sim$i.num[400, ] == 0)} simulations. Model extinctions occur in this 
case because the recovery rate in the first group is relatively short and there 
is only one person initially infected.
<<icmSisPlot2>>=
plot(sim, y = c("i.num", "i.num.g2"), mean.lwd=3,
     sim.lines = TRUE, sim.col = c('steelblue', 'firebrick'), 
     main = "Disease Prevalence: Means and Individual Simulations",
     leg = TRUE)
@
Another useful diagnostic for this behavior is found in the \texttt{summary} 
function, where we would find that at time step 400, the mean number infected is 
\Sexpr{round(mean(as.numeric(sim$i.num[400, ])),1)}, and the standard deviation 
around that mean is \Sexpr{round(sd(as.numeric(sim$i.num[400, ])),1)}. 

If this phenomenon of stochastic model extinction represents the underlying 
epidemic process of interest in which there is one initial infected, these 
\texttt{epiICM} models have utility per se. But if the number of initial infected 
is arbitrary (or unknown), the model extinctions may be an artificiality to be 
removed: in that case, one may increase the total population size (specifically 
the initial number infected) or reduce the size of the time step (and also, 
adjust the denominators of the parameters with units of time in them).


\section{Stochastic Network Models} 
Network models move beyond individual contact models by explicitly modeling 
phenomena within and across partnership dyads (pairs of individuals who remain 
in contact) over time. This enables partnerships to have duration in time, 
allowing for repeated acts with the same person, specification of partnership 
formation and dissolution rates, control over the temporal sequencing of multiple 
partnerships, and specification of network-level features. As one dyad may now be 
connected to other dyads, this forms a partnership network. 

\paragraph{Model Framework} \texttt{EpiModel} uses exponential-family random graph 
models (ERGMs) to estimate and simulate complete partnership networks based on 
patterns of density, degree, assortivity, and other network features. Since 
epidemic models are dynamic, evolving systems, we use temporal ERGMs, in which 
partnership formation and dissolution are modeled and simulated over time.

Dynamic network models may be estimated from several different types of empirical 
data, including panel data on a complete network over time. For a description of 
these options, please consult the help documentation and vignettes for the 
\texttt{tergm} and \texttt{networkDynamic} packages. \texttt{EpiModel} currently 
has functionality only run network estimations with target statistics for formation 
that may be estimated using so-called ``egocentric network sampling:'' a random 
sample of the population is drawn, and those individuals are asked about a 
complete or limited set of their partnerships within an interval. Network models 
may thus be parameterized by inputting summary target statistics for the 
distribution of partnership number at one point in time, assortivity in partner 
traits, and other dyadic and network-level features. On top of this, an average 
of partnership duration is estimated from the data, and used to govern partnership 
dissolution rates.

\paragraph{Model Processes} \texttt{EpiModel} has the capacity to simulate 
disease epidemics over these partnership networks by integrating this statistical 
framework for networks with stochastic transmission processes similar to those 
featured in the \texttt{epiICM} class disease models. Similar to \texttt{epiICM}, 
these network models require specification of epidemic parameters that govern the 
transmission, recovery, and other other transition processes of individual 
persons in discrete time. The three model types currently supported are the same: 
SI, SIR, and SIS disease types. These types will be expanded in future 
\texttt{EpiModel} releases.

In contrast to \texttt{epiDCM} and \texttt{epiICM} models, which solve or 
simulate the entire epidemic system with one function, network models require 
multiple steps: 1) the partnership network is parameterized, fit, and diagnosed; 
2) a complete network is simulated based on that model fit; and 3) the disease 
processes are simulated on top of the dynamic simulated network.


\paragraph{Independent versus Dependent Models} A key distinction for network models is whether two dynamic processes, the 
partnership network dynamics and the disease transmission dynamics, are treated as independent or dependent. \textbf{Independent} network models assume no influence of the disease simulation on the structure of the temporal network, although the structure of the temporal network most certainly impacts the disease. \textbf{Dependent} network models allow for the disease process to influence the network. Examples include cases like serosorting -- where disease status influences partner selection -- and demographic processes (births, deaths, and migration) -- where the partner selection process must adapt to changing 
population size and composition.


\paragraph{Model Functions} Network models in \texttt{EpiModel} thus involve two 
or three main functions given the choice of independent or dependent model structure:
\vspace{-3pt}
\begin{enumerate}\itemsep1pt
\item \texttt{epiNet.est} estimates the generative model for the dynamic 
partnership networks. This function is a wrapper around the \texttt{ergm} and 
\texttt{stergm} functions in those similarly named packages, with additional 
diagnostic tables and plots useful for dynamic epidemic models.
\item \texttt{epiNet.simNet} simulates networks given a model fit with 
\texttt{epiNet.est}. These network simulations are used for network epidemic 
models in which there is no dependence between the network structure and the 
disease process (thus, the network structure may be fully simulated ahead of the 
disease simulation).
\item \texttt{epiNet.simTrans} then runs the stochastic epidemic models, with a 
given network model fit from \texttt{epiNet.est} or set of network simulations 
from \texttt{epiNet.simNet}, respectively. For models involving dependence 
between the network structure and the disease trajectories (e.g., disease causes 
death, which dissolves partnerships), the direct model fit is used and the network 
re-simulated at each time step.
\end{enumerate}

We explain these processes in further detail with two network modeling tutorials, 
one for an independent SIS model with one mode and one for a dependent SI model 
with two modes.


\subsection{Independent One-Mode SIS Model}\label{sec:netIndModel}
In this section, we simulate a recoverable disease (e.g., a bacterial sexually 
transmitted infection) over a one-mode network in which we assume the disease 
status does not influence partnership structure. In the language of DCM models 
in~\autoref{sec:dcm} and ICM models in~\autoref{sec:icm}, this is a 
\textit{one-group} network in a closed population. In network terminology applied 
to epidemic modeling, modes are essentially groups or categories of nodes that 
govern the rules of mixing. One-mode networks allow for partnership mixing 
throughout the network, whereas two-mode (or bipartite) networks restrict mixing 
to across modes (no within-group partnerships are allowed). 

\subsubsection{Network Estimation and Diagnostics}
The first step in any network model is to specify a network structure, including 
features like size and compositional traits. Here, we construct an empty network 
of 100 nodes with two races of equal node size.\footnote{We have used very small 
networks that are simulated over a short number of time steps for computational 
efficiency in building this tutorial vignette; in running your own models, it is 
suggested that you increase both as necessary depending on your data and scientific 
questions.} The \texttt{network.initialize} function creates an object of class 
\texttt{network} with 100 nodes and no edges (partnerships) between them. The next 
line creates a vertex (node) attribute called ``race'', which for simplicity has 
categories 0 and 1: there are 50 nodes of race 0 and 50 nodes of race 1. 
<<netEstParams1>>=
nw <- network.initialize(n = 100, directed = FALSE)  
nw %v% "race" <- rep(0:1, each = 50)
@


\paragraph{Model Parameters} Next, we specify the partnership formation and 
dissolution model formulas for the STERGM fit. The \texttt{formation} object is 
a right-hand side ERGM formula for edge formation. The \texttt{target.stats} are 
the target statistics that are passed to the ERGM estimation based on calculations 
from egocentric sampling of partnerships: there are an average of 45 total 
partnerships at any point in time, 83.1\% of those partnerships were of the same 
race, 36 nodes have no partners (a degree of zero), and 18 nodes have two or more 
ongoing partnerships. The dissolution object specifies that the partnership 
dissolution is a fixed (offset) parameter set below resulting in a homogeneous 
exponential dissolution model.
<<netEstParams2>>=
formation <- ~ edges + nodematch("race") + degree(0) + concurrent
target.stats <- c(45, 37.4, 36, 18)
dissolution <- ~ offset(edges)
@

The fixed dissolution coefficient is calculated based on the average duration of 
partnerships. Here, the average is indicated as 20 months. The \texttt{dissolution.coefs} 
function performs the necessary log transformation of the duration vector given 
the dissolution model specified above. See the additional \texttt{EpiModel} 
vignette for Network Utility Functions for more information. In brief, the function
provides the transformed coefficient here; a coefficient adjusted for exogeneous
partnership dissolutions due to death is also possible but not used in this
closed-population model (therefore the crude and adjusted coefficients are the
same).
<<netEstParams3>>=
duration <- 20
coef.diss <- dissolution.coefs(dissolution, duration)
coef.diss
@

\paragraph{Model Fit} The \texttt{epiNet.est} function performs both the STERGM 
estimation and basic diagnostics for assessing the model fit. For this function, 
it is necessary to specify the base network object, the formation and dissolution 
formulas, the target statistics, and dissolution coefficient. By default, the 
temporal model is estimated using an approximation of a static ERGM to a STERGM 
fit using a correction to the formation coefficients that are within the 
dissolution model. This so-called  ``Edges Dissolution'' correction is often more 
computationally efficient than the full STERGM fit, which may be requested by 
specifying \texttt{edapprox=FALSE}. 
<<netEst, results="hide", warning=FALSE>>=
est1 <- epiNet.est(nw, 
                   formation, 
                   dissolution, 
                   target.stats, 
                   coef.diss)
@
By default, the diagnostic statistics will be run, with the diagnostic network 
statistics set as the formation formula. To request alternative network statistics, 
see the help file for the \texttt{stats.formula} argument for the function. It will 
take any right-hand sided ERGM formulation for summary statistics.

\paragraph{Model Diagnostics} Printing the object will show the basic diagnostic 
summaries of average fit to the target statistics and dissolution coefficients. 
By default, the function will simulate the complete network from the model fit 
one time for a series of 1000 time steps (the time steps may be changed). Then, 
mean and standard deviations are calculated for the time series simulation.
<<netEstPrint>>=
est1
@

Plotting the object will show the time-varying target statistics for the 
formation fit over time. On the x-axis is the 1000 time steps that the dynamic 
model has been run, and on the y-axis are the target values for the formation 
summary statistics. For those model diagnostics with a matching target statistic 
(it is certainly possible to request diagnostics for a network statistic that is 
not part of the formation model), a single dotted line shows the values (compare 
these to the \texttt{target.stats} set above).
<<netEstPlot1>>=
plot(est1)
@

By default, the plotting function tries to be smart about when to plot everything 
together and when to separate into distinct plots, but these can also be controlled 
manually using the \texttt{plots.joined} argument. Here we use separate plots for 
each of the four statistics, and only request 100 time steps of summary statistics. 
The model may appear to show poor fit here, but note that the time range is shorter 
and the y-axis scale is much narrower for each plot compared to the joined plot above.
<<netEstPlot2>>=
plot(est1, plots.joined = FALSE, dx.start = 100, dx.end = 200)
@

\subsubsection{Network Simulation}\label{sec:netIndSim}
In an independent network epidemic model, the dynamic networks can be simulated 
first, before running the disease transmission simulation. The 
\texttt{epiNet.simNet} function does just that, with the input of the 
\texttt{epiNet.est} fitted model as above, the desired number of time steps, and 
number of network simulations. Here, we run 10 network simulations based on the 
fit above for 50 time steps.
<<netSim, results="hide">>=
nwsims <- epiNet.simNet(est1, nsteps = 50, nsims = 5)
@

Printing the object will show the structure of the network simulation output 
object, including the number of simulations and time steps per simulation. Also 
included is information on the base network object, which is the static network 
from which the dynamic networks are simulated. This is helpful to see, for 
example, the overall network structure and names of the vertex attributes.
<<netSimPrint>>=
nwsims
@

Plotting the network simulation now will show the results from each of the 
simulations over time, with the same sort of formation statistic output as in the 
diagnostic plots of the \texttt{epiNet.est} object. Note that simulating network 
multiple times and plotting the network simulation output like this provides 
additional diagnostic tools on top of those in \texttt{epiNet.est}.
<<netSimPlot>>=
plot(nwsims, plots.joined = FALSE)
@

An additional plot is available for \texttt{epiNet.simNet} objects by specifying 
a duration plot. Here, the average age of all partnerships up until time $t$ is 
shown for all times from 1 to the number of time steps specified in the network 
simulation. In the model fit, we specified that the average duration should be 20 
time steps (shown in the dotted line); since all partnerships start at time 1 
(actually, they are left-censored at this step), the average age of partnerships 
at that time is 0. Over time, the average age should approximate the target 
duration (it does if we were to run our simulation out longer).
<<netSimPlot2>>=
plot(nwsims, type = "duration")
@


\subsubsection{Disease Simulation on the Network}
The final step is for the disease transmission process to be simulated over the 
dynamic simulated networks. The disease simulation function is 
\texttt{epiNet.simTrans}.

For this tutorial, we model disease as a basic SIS epidemic process in which there 
is a constant transmission probability given contact and a recovery rate given 
infection. The \texttt{sims.per.nw} argument governs how many disease simulations 
per simulated partnership network should be run. By default, one disease 
simulation per simulated network is conducted. Since we run the simulation only 
for 50 time steps, we set the transmission probability to be quite high.
<<netIndSimTrans, results="hide">>=
sim1 <- epiNet.simTrans(nwsims, 
                        type = "SIS",
                        sims.per.nw = 1,
                        trans.rate = 0.5,
                        act.rate = 3,
                        rec.rate = 0.1,
                        i.num = 10)
@
In contrast to the \texttt{act.rate} parameter of \texttt{epiDCM} and 
\texttt{epiICM}, here the parameter means the \textbf{average number of acts 
within a partnership per unit time}. It does not govern how frequently new 
partnerships are formed, which is set by the dissolution coefficients in the 
network model estimation stage. Therefore, the final transmission probability 
per partnership per unit time is based on a simple function of the transmission 
probability per act and number acts: $1-((1-\tau)^{\alpha})$ where $\tau$ is the 
\texttt{trans.rate} and $\alpha$ is the \texttt{act.rate}.

Also in contrast to the other model classes, we set the initial state sizes only 
for the infected compartment, with \texttt{i.num}. The total population size thus 
the number of susceptibles at baseline is calculated as a function of the network 
size that was set in the first step. The initial infected state may be specified 
either as a deterministic or randomly generate number or prevalence, or by a 
deterministic vector of specific nodes that are infected.

\paragraph{Summaries} Similar to \texttt{epiDCM} and \texttt{epiICM} models, 
printing the object shows the basic structure and output from the disease 
simulation model. Note that this shows all the available compartments and flows. 
Also available in network models are the networks and transmission data frames, 
which we explain below.
<<netIndSimTransPrint>>=
sim1
@

Similar to \texttt{epiICM} class models, epidemic statistics may be obtained 
using the summary function. This summary shows the mean and standard deviation of 
simulations at time step 25, and also generates a compartment plot showing the 
same information at this time step visually.
<<netIndSimTransSumm>>=
summary(sim1, time = 25, comp.plot = TRUE)
@

\paragraph{Extraction} Similar to the \texttt{epiICM} class models, means, 
standard deviations, and individual simulation run data is easily extracted 
using the \texttt{as.data.frame} function. The default as before is to output 
the means, but here we show how to extract the model values from the second 
simulation only.
<<netIndSimTransHead>>=
head(as.data.frame(sim1, out = 'vals', sim = 2))
@

The simulated \texttt{networkDynamic} objects with type-specific partnership and 
disease infection status information are stored under the \texttt{network} list 
in the main model object. They may be  extracted and stored to an external object 
for further analysis.\footnote{Note that there are some intended redundancies in 
data built into network models to facilitate analysis and visualization purposes. 
In running these models for research purposes, one should consider which 
information it is necessary to store in the output object, as this may increase 
the computational efficacy for the simulations. See the help file for 
\texttt{epiNet.simTrans} to see how to toggle these storage options.}
<<netIndSimTransNw>>=
( nw1 <- sim1$network$sim1 )
@

A listing of the disease transmissions over time is available through the 
transmissions data frame. The columns show the infection time, infecting partner, 
susceptible partner, edge ID number, the time at which the infecting partner was 
him/herself infected, the associated \texttt{trans.rate} parameter, and final 
transmission probability that is a function of the \texttt{trans.rate} and 
\texttt{act.rate}.
<<netIndSimTransTrans>>=
trans1 <- sim1$trans$sim1
head(trans1, 10)
@

\paragraph{Plotting}\label{sec:netIndPlot}
There are two main ways to plot the results of this network disease model: the 
standard line plots showing the epidemic trajectories similar to the individual 
contact model plots (see~\autoref{sec:icm}), and static network plots showing a 
snapshot of the partnership network with information on disease status.

By default, the plot shows disease trajectories (compartment sizes) over time. 
The plotting function uses the same defaults for the stochastic model results as 
in \texttt{epiICM} class models, and therefore, the same arguments options apply. 
In a one-mode network model, the default is to plot the mean and inter-quartile 
range of all compartments in the model for the full length of the model was run.
<<netIndSimTransPlot1>>=
plot(sim1)
@

To plot the means of disease \textit{incidence} and new recoveries over time, it 
is necessary to specify the outcomes of interest using the \texttt{y} argument, 
and also to set the population fraction denominator to \texttt{FALSE}. The 
\texttt{si.flow} is the number of transitions from susceptible to infected at 
that time, and the \texttt{is.flow} is the number of transitions back from 
infected to susceptible.
<<netIndSimTransPlot2>>=
plot(sim1, y = c("si.flow", "is.flow"), leg = TRUE)
@

Plotting the static network at different time steps and over different simulations 
can show the patterns of partnership formation and disease spread over those 
partnerships. By default, the plot type is the compartment size line plots 
(\texttt{type="sim"}), but we set the network plot by specifying 
\texttt{type="network"}.

Below, we plot two time points from the same simulation, at time steps 1 and 50. 
The \texttt{col.inf} argument takes care of the color coding for easy plotting 
of the infected (in red) versus negative (in blue). Note that the 
\texttt{zeromarg} argument sets the network plot margins to zero by default for 
better visualization of dense networks, but \textit{must} be toggled 
\texttt{FALSE} in plots when a non-zero margin is needed to allow for plot titles.
<<netIndSimTransPlot3>>=
par(mfrow = c(1,2), mar = c(0,0,2,0))
plot(sim1, type = "network", at = 1, col.inf = TRUE, 
     zeromarg = FALSE, main = "Prevalence at t1")
plot(sim1, type = "network", at = 50, col.inf = TRUE, 
     zeromarg = FALSE, main = "Prevalence at t50")
@

Given the stochasticity of the model, another interesting network plot would 
show the variability in simulations at a specific time step. Here, we plot the 
two simulations with the lowest and highest prevalence at time step 25. First, 
we have to find the simulation number with the lowest and highest values of 
infecteds at that time, then those extract those values.
<<netIndSimTransPlot4>>=
time <- 25
lsim <- which.min(sim1$i.num[time, ])
hsim <- which.max(sim1$i.num[time, ])
lprev <- sim1$i.num[time, lsim]
hprev <- sim1$i.num[time, hsim]
par(mfrow = c(1,2), mar = c(0,0,2,0))
plot(sim1, type = "network", at = 25, sim = lsim, 
     col.inf = TRUE, zeromarg = FALSE, 
     main = paste("Sim", lsim, ", prev=", lprev, sep=""))
plot(sim1, type = "network", at = 25, sim = hsim, 
     col.inf = TRUE, zeromarg = FALSE, 
     main = paste("Sim", hsim, ", prev=", hprev, sep=""))
@
As this example shows, it is possible to extract, analyze, and plot many objects 
embedded within the larger \texttt{epiNet.simTrans} object to investigate the 
epidemic trajectory over time and at specific time points.


\subsection{Dependent Bipartite SI Model}\label{sec:netDepModel}
In the second network model example, we introduce dependence between the disease 
simulation and the network structure. The main forms of dependence currently 
implemented in \texttt{EpiModel} are demographic transition processes for births 
and deaths. This is integrated into network models similarly to the stochastic 
transition processes in \texttt{epiICM} class models, in which the number of new 
births and deaths at each time step is determined as a random draw from a Poisson 
distribution with the rate parameter set by the parameter arguments in the model. 
These processes are handled in a specialized way in network models as nodes and 
their associated edges have to be ``activated'' and ``deactivated'' over time to 
allow for correct simulation of the partnership network. Other forms of 
network/disease dependence, including the dependence between disease infection 
and probability of partnership formation (i.e., serosorting), will be added in 
future \texttt{EpiModel} releases.

Additionally in this example, we simulate an epidemic model here within a 
bipartite network. Such a network may be used to represent purely heterogeneous 
mixing as in heterosexual-only models of disease transmission. This is 
\textit{not the only way} to represent this form of mixing, but it does 
facilitate the modeling of mode-specific network terms (e.g., different degree 
distributions) and disease features as one  might need in sex-differentiated 
epidemics.

\subsubsection{Network Estimation and Diagnostics}
As with the independent network model in~\autoref{sec:netIndModel}, the first 
step is to specify a network structure, including features like size and nodal 
attributes. Here, we construct an empty network of 100 nodes, with 50 in each 
mode. One might conceive of the first mode as females and the second mode as males.
<<netDepEstParams1>>=
num.m1 <- 50 
num.m2 <- 50
nw <- network.initialize(num.m1 + num.m2, 
                         bipartite = num.m1, directed = FALSE)
@

\paragraph{Degree Balancing} For our target statistics, we will use sex-specific 
degree distributions. Similar to the contact balancing requirements in acts 
described in~\autoref{sec:dcmSi2g}, it is necessary to balance the number of 
partnerships implied by a degree distribution in one mode to that of another. 
This is particularly an issue when one sex tends to report higher average numbers 
of partners in surveys used to calculate model parameters. 

In \texttt{EpiModel}, we can check that the implied number of partnerships match 
given different degree distributions specified in vectors of fractional values 
using the \texttt{bip.degdist.check} function. Consider two degree distributions 
in which the proportion of females currently having 0, 1, 2, or 3 partners is 
40\%, 55\%, 4\%, and 1\%, respectively. The distribution for men may be different 
within each degree but the total number of partnerships must match. Below we plot 
the mode-specific degree distributions.
<<netDepEstParams2>>=
deg.dist.m1 <- c(0.40, 0.55, 0.04, 0.01)
deg.dist.m2 <- c(0.48, 0.41, 0.08, 0.03)
par(mar=c(3,3,2,1))
barplot(cbind(deg.dist.m1, deg.dist.m2), beside = TRUE, 
        legend.text = paste("deg", 0:3, sep=""), ylim = c(0,0.6))
@

Given these fractional degree distributions and the mode sizes set in when 
initializing the network, the \texttt{bip.degdist.check} function checks for 
balance. The output is table with the number of nodes with each degree, as well 
as the total number of edges in that mode. The latter must match across modes to 
ensure degree balance. See the additional \texttt{EpiModel} vignette on Network 
Utility Functions for more information.
<<netDepEstParams2b>>=
bip.degdist.check(num.m1, num.m2, 
                  deg.dist.m1, deg.dist.m2)
@

\paragraph{Model Fit} As with the independent network model, we next specify the 
partnership formation and dissolution model formulas for the STERGM fit 
(see~\autoref{sec:netIndModel} for more information). The target statistics for 
partnership formation are the overall number of partnerships at one point in time, 
the number of nodes in the first mode with no partners or only one partner, and 
the similar degree terms for the second mode nodes. The dissolution model is a 
homogeneous exponential decay with mean partnership duration of 25 time units.
Note that we need to specify a background death rate using the \texttt{d.rate}
parameter, to account for the fact that death presents an exogenous competing
risk to partnership dissolution on top of the estimated, endogenous average duration.
See the HTML vignette, \textit{EpiModel Network Utility Functions}, for more
details.
<<netDepParams3>>=
formation <- ~ edges + b1degree(0:1) + b2degree(0:1)
target.stats <- c(33, 20, 27.5, 24, 20.5)
dissolution <- ~ offset(edges)
coef.diss <- dissolution.coefs(dissolution, duration=25, d.rate=0.01)
coef.diss
@


The network estimation process for this model uses the \texttt{epiNet.est} 
function in the exact same way as our independent model 
in~\autoref{sec:netIndModel}. For this example, we also show how to obtain 
diagnostic formation statistics that are not included in the main formation 
model: although we only target degree of zero and one for the model, we would 
like to monitor the average number of nodes in each mode with two, three, four, 
and five partners. To do that, we specify a right-hand sided formation formula 
called \texttt{dx.stats}, which we enter into the \texttt{epiNet.est} in the 
\texttt{stats.formula} argument. Note also that we set the randomization seed here; 
in testing the model fitting process, it takes quite some time for the 
Markov-chain monte carlo (MCMC) estimation process to converge (see the help 
documentation for the \texttt{tergm} package for details on these processes).
<<netDepEst, results="hide", warning=FALSE>>=
dx.stats <- ~ edges + b1degree(0:5) + b2degree(0:5)
set.seed(12345)
est2 <- epiNet.est(nw, 
                   formation, 
                   dissolution, 
                   target.stats, 
                   coef.diss, 
                   stats.formula = dx.stats)
@

\paragraph{Model Diagnostics} Printing the object will show the basic diagnostic 
summaries of average fit to the target statistics. Note that the diagnostic 
statistics for the terms that were monitored but not entered into the model 
(degree terms above 2 for both modes) show as \texttt{NA} in the target statistics 
column but summary means are provided. This also works in converse (it is possible 
to diagnostically monitor a set of network statistics that excludes terms from 
the formation formula, although this is not recommended).
<<netDepEstPrint>>=
est2
@

Plotting the object will show varying target statistics fit over time. By default, 
the plots are split because of the large number of statistics. Each plot has a 
different y-axis scale. There are very few nodes of either mode with three or 
more partnerships at any one time.
<<netDepEstPlot>>=
plot(est2)
@


\subsubsection{Disease Simulation on the Network}
In a dependent network epidemic model (disease status influences partnership 
formation and dissolution, and vice versa), the dynamic networks are all 
simulated concomitantly with the main disease transmission simulation function, 
\texttt{epiNet.simTrans}. Therefore, no simulation of a series of partnership 
networks is needed as with independent models (see~\autoref{sec:netIndSim}). In 
this model, we incorporate births and deaths into the simulation to allow for an 
open population.

The main model parameters are as follows. We set the disease initial prevalence 
to 10\%; the exact number of nodes infected will be based on random draws from a 
binomial distribution summarized by that prevalence. Similar to \texttt{epiDCM} 
and \texttt{epiICM}, different transmission probabilities by mode are allowed to 
incorporate a higher susceptibility for disease for one mode. 

Additionally, we set the birth rate to be based on the death rate for susceptibles 
to achieve a relatively stable equilibrium prevalence (which we will not see here 
because of the short time steps). Since the birth rate is calculated based on the 
size of the mode-one population in bipartite simulations (again, with females 
implied as this mode), we multiply it by two. Finally, the death rate for the 
infecteds is slightly higher than for the susceptibles.
<<netDepSimTransParams>>=
i.num <- 10
trans.rate <- 0.5
trans.rate.m2 <- 0.1
b.rate <- 2/100
ds.rate <- 1/100
di.rate <- 1/90
@

Note that for the disease simulation function, we pass the network estimation 
object directly from \texttt{epiNet.est} and specify \texttt{vital=TRUE} to 
include these demographic processes. Also, the \texttt{sims.per.nw} has a 
different meaning than in independent simulations: here it is simply the number 
of independent disease simulations requested, since each simulation uses a newly 
simulated network because of the resimulation at each time step. 
<<netDepSimTrans, results="hide">>=
sim2 <- epiNet.simTrans(est2,
                        type = "SI",
                        vital = TRUE,
                        i.num = i.num,
                        trans.rate = trans.rate,
                        trans.rate.m2 = trans.rate.m2,
                        b.rate = b.rate,
                        ds.rate = ds.rate,
                        di.rate = di.rate,
                        sims.per.nw = 3,
                        nsteps = 50)
@

Printing the object shows that we have an \texttt{EpiModel} object that is an SI 
network model with three simulations over 50 time steps with a two-mode network. 
The model output now includes mode-specific output for compartments and flows, 
including the birth and death transitions. The model output may be summarized 
using the \texttt{summary} function and extracted using the \texttt{as.data.frame} 
function, similar to the independent model example in~\autoref{sec:netIndModel}.
<<netDepSimTransPrint>>=
sim2
@

As with the independent network model, a listing of the transmissions by time is 
available through the transmissions data frames stored on the object. The columns 
show the infection time, infecting partner, susceptible partner, edge ID number, 
infection time of the infecting partner, the \texttt{trans.rate} parameter tied 
to that mode, and final transmission probability that is a function of the 
\texttt{trans.rate} and \texttt{act.rate}.
<<netDeptSimTransTrans>>=
trans1 <- sim2$trans$sim1
head(trans1)
@
Note that the transmission rates are higher when the mode 1 nodes are the 
susceptible partner, since the definition of the rates is the probability of 
infection to that mode given contact with an infected of the other mode. Also, 
note that the ID numbers for the nodes begin the a F or M prefix: because of the 
way that the ID system works for dynamic bipartite networks, it is necessary to 
use this specialized ID that persists over time (see the help file for the 
\texttt{init.pids} function). 

\paragraph{Plotting} The plotting for dependent disease simulations is the same 
as for independent simulations as described in~\autoref{sec:netIndPlot}. Since 
this is a bipartite network, the default plot shows the means only of the state 
sizes over time for each of the modes. Here we plot the absolute numbers from the 
simulations, which is suggested at least for diagnostics after an open population 
simulation is run because the compartment prevalences may use unexpectedly small 
denominators if the death rate is misspecified.
<<netDepSimTransPlot1>>=
plot(sim2, popfrac=FALSE)
@

Similar to the static network plots for the independent network model 
in~\autoref{sec:netIndPlot}, plotting the network of partnership structure and 
disease status is made easy with arguments to the generic network plotting 
functions. In addition to the \texttt{col.inf} argument that automatically colors 
the infected red, bipartite simulations also allow for differential shapes for 
the modes. Here, one may set the second-mode shapes to either triangle or square 
using the \texttt{shp.bip} argument. Note how one mode only has formed 
partnerships with nodes of the opposite mode, as signified by the different shapes.
<<netDepSimTransPlot3>>=
par(mfrow=c(1,2))
plot(sim2, type = "network", at = 1, col.inf = TRUE, shp.bip = "triangle")
plot(sim2, type = "network", at = 50, col.inf = TRUE, shp.bip = "square")
@



\subsection{Dynamic Visualization with \texttt{ndtv}}
A dynamic network animation that shows partnership change along with disease 
transitions is available using the \texttt{ndtv} package.  More detailed examples 
are provided in the \texttt{ndtv} package vignette.
<<ndtvLoad, eval=FALSE>>=
library(ndtv)
@

First, we extract the \texttt{networkDynamic} object from the 
\texttt{epiNet.simTrans} object from above. Here we are just pulling the fifth 
network. The \texttt{colorTEA} function that sets up some color attributes based 
on infection status for the animation (see the help file for this function).
<<ndtvRecode, eval=FALSE>>=
nw <- sim2$network$sim1
nw <- colorTEA(nw)
@

The next step is to compute coordinates for all the nodes over time. Here, we 
set the animation for time steps 1 to 25, although the simulation runs twice as 
long. Additional options are explained in the \texttt{ndtv} vignette.
<<ndtvCoords, eval=FALSE>>=
slice.par <- list(start = 1, end = 50, interval = 1, 
                  aggregate.dur = 1, rule = "any")
compute.animation(nw, slice.par = slice.par, 
                  animation.mode = "MDSJ")
@

The \texttt{render.animation} function takes the dynamic coordinates and creates 
an animation object for the network. The function takes all the standard graphical 
parameters for \texttt{plot.network}.
<<ndtvRender, eval=FALSE>>=
render.par=list(tween.frames = 10, 
                show.time = FALSE)
plot.par=list(mar = c(0,0,0,0))
render.animation(nw, 
                 render.par = render.par, 
                 plot.par = plot.par,
                 vertex.cex = 0.9, 
                 vertex.col = "ndtvcol", 
                 edge.col = "darkgrey", 
                 vertex.border = "lightgrey", 
                 displaylabels = FALSE)
@

Finally, the animation may be saved out to a variety of formats, but here is one 
option, an animated GIF file, that looks good on webpages.
<<ndtvSaveGif, eval=FALSE>>=
saveGIF(ani.replay(), 
        ani.width = 600, 
        ani.height = 600, 
        outdir = getwd())
@

Here's how to save out out the animation to a \texttt{mp4} video file.
<<ndtvSaveVideo, eval=FALSE>>=
saveVideo(ani.replay(), 
          video.name = "EpiModelndtv.mp4", 
          other.opts = "-b 5000k", 
          clean = TRUE, 
          ani.width = 1200, 
          ani.height = 1200)
@


\section{Future Work}
In future releases of \texttt{EpiModel}, we will extend the functionality of the 
software in a number of ways. These include:
\vspace{-3pt}
\begin{itemize}\itemsep1pt
\item \textbf{Adding disease types:} Currently, \texttt{EpiModel} model allows 
for easy modeling of SI, SIR, and SIS disease types with relatively few governing 
parameters. These model types may be insufficient for more complicated disease 
structures, such as an HIV model with multiple stages of disease, or an SIRS model 
in which there is waning immunity after infection. Our plan is to continue to 
implement basic structures of these models across all three model classes 
(\texttt{epiDCM}, \texttt{epiICM}, and \texttt{epiNet}) for pedagogical and basic 
research purposes.
\item \textbf{Increasing the flexibility of models:} Currently, our models are 
limited to basic partnership mixing and disease features that we have used in our 
teaching on modeling. As we build in additional functionality for new model types, 
we will also increase the flexibility of existing model types by, for example, 
allowing more than purely dissasortative mixing.
\item \textbf{Implementing research-level tools:} Mathematical modeling of 
epidemics is difficult to provide in general software because models often require 
very specific and complex processes that dictate the partnership/contact process, 
the disease transitions given contact, and underlying demographic features. Our 
goal with \texttt{EpiModel} is not to provide ``out-of-the-box'' solutions for 
all possible model types, but instead to provide documented modules for use in 
these models. 
\vspace{-4pt}
\begin{itemize}\itemsep1pt
\item With some general knowledge of programming in R, it should be 
possible to extend these tools, specifically the network-based modeling tools, 
to accommodate a variety of research needs. 
\item We have modularized the specific processes
of simulating stochastic network models in the \texttt{epiNet.simTrans} function,
and one starting place to start unpacking that main function is the help file for
those modules:
<<eval=FALSE>>=
help('epiNetModules')
@
\end{itemize}
\item \textbf{Optimization:} The first goal of this new software was to get it right,
and only then can we start working on making it fast. Network models in particular
may take substantial computational resources, especially for large networks over
long time steps. The \textit{Statnet} team is continually working on optimizing 
the core packages along with \texttt{EpiModel} to reduce computational burdens.

\end{itemize}

\end{spacing}
\end{document}

